{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "exuxg5D1lqbw"
   },
   "source": [
    "## ISOM5160 Exercise 01 - Fortune 500 Companies\n",
    "\n",
    "---\n",
    "The dataset can be downloaded at [https://data.world/aurielle/fortune-500-2017](https://data.world/aurielle/fortune-500-2017) \n",
    "\n",
    "The CSV file contains information about fortune 500 companies in 2017. The original dataset contains 500 rows and 23 columns. In this notebook, we will only work on the following columns.\n",
    "\n",
    "* ```Rank``` - company's position on the fortune 500 list\n",
    "* ```Title``` - name of the company\n",
    "* ```Employees``` - number of employees\n",
    "* ```Sector``` -  the market sector that the company is in\n",
    "* ```Revenues``` - revuenue of the year in millions\n",
    "* ```Revchange``` - revnuenue change in % compared to the last year\n",
    "* ```Profits``` - profit of the year in millions\n",
    "* ```Prftchange``` - profit change in % compared to the last year\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "bNiwPPVAlqb0"
   },
   "source": [
    "#### Task 2.0: Import packages and the data file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 553
    },
    "id": "4ZeHG87clqb1",
    "outputId": "32075051-7537-4d35-fdbe-bdbd58391a7f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rank</th>\n",
       "      <th>Title</th>\n",
       "      <th>Employees</th>\n",
       "      <th>Sector</th>\n",
       "      <th>Industry</th>\n",
       "      <th>Revenues</th>\n",
       "      <th>Revchange</th>\n",
       "      <th>Profits</th>\n",
       "      <th>Prftchange</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Walmart</td>\n",
       "      <td>2300000</td>\n",
       "      <td>Retailing</td>\n",
       "      <td>General Merchandisers</td>\n",
       "      <td>485873</td>\n",
       "      <td>0.8</td>\n",
       "      <td>13643.0</td>\n",
       "      <td>-7.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Berkshire Hathaway</td>\n",
       "      <td>367700</td>\n",
       "      <td>Financials</td>\n",
       "      <td>Insurance: Property and Casualty (Stock)</td>\n",
       "      <td>223604</td>\n",
       "      <td>6.1</td>\n",
       "      <td>24074.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Apple</td>\n",
       "      <td>116000</td>\n",
       "      <td>Technology</td>\n",
       "      <td>Computers, Office Equipment</td>\n",
       "      <td>215639</td>\n",
       "      <td>-7.7</td>\n",
       "      <td>45687.0</td>\n",
       "      <td>-14.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Exxon Mobil</td>\n",
       "      <td>72700</td>\n",
       "      <td>Energy</td>\n",
       "      <td>Petroleum Refining</td>\n",
       "      <td>205004</td>\n",
       "      <td>-16.7</td>\n",
       "      <td>7840.0</td>\n",
       "      <td>-51.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>McKesson</td>\n",
       "      <td>68000</td>\n",
       "      <td>Wholesalers</td>\n",
       "      <td>Wholesalers: Health Care</td>\n",
       "      <td>192487</td>\n",
       "      <td>6.2</td>\n",
       "      <td>2258.0</td>\n",
       "      <td>53.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>UnitedHealth Group</td>\n",
       "      <td>230000</td>\n",
       "      <td>Health Care</td>\n",
       "      <td>Health Care: Insurance and Managed Care</td>\n",
       "      <td>184840</td>\n",
       "      <td>17.7</td>\n",
       "      <td>7017.0</td>\n",
       "      <td>20.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>CVS Health</td>\n",
       "      <td>204000</td>\n",
       "      <td>Health Care</td>\n",
       "      <td>Health Care: Pharmacy and Other Services</td>\n",
       "      <td>177526</td>\n",
       "      <td>15.8</td>\n",
       "      <td>5317.0</td>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>General Motors</td>\n",
       "      <td>225000</td>\n",
       "      <td>Motor Vehicles &amp; Parts</td>\n",
       "      <td>Motor Vehicles and Parts</td>\n",
       "      <td>166380</td>\n",
       "      <td>9.2</td>\n",
       "      <td>9427.0</td>\n",
       "      <td>-2.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>AT&amp;T</td>\n",
       "      <td>268540</td>\n",
       "      <td>Telecommunications</td>\n",
       "      <td>Telecommunications</td>\n",
       "      <td>163786</td>\n",
       "      <td>11.6</td>\n",
       "      <td>12976.0</td>\n",
       "      <td>-2.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>Ford Motor</td>\n",
       "      <td>201000</td>\n",
       "      <td>Motor Vehicles &amp; Parts</td>\n",
       "      <td>Motor Vehicles and Parts</td>\n",
       "      <td>151800</td>\n",
       "      <td>1.5</td>\n",
       "      <td>4596.0</td>\n",
       "      <td>-37.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rank               Title  Employees                  Sector  \\\n",
       "0     1             Walmart    2300000               Retailing   \n",
       "1     2  Berkshire Hathaway     367700              Financials   \n",
       "2     3               Apple     116000              Technology   \n",
       "3     4         Exxon Mobil      72700                  Energy   \n",
       "4     5            McKesson      68000             Wholesalers   \n",
       "5     6  UnitedHealth Group     230000             Health Care   \n",
       "6     7          CVS Health     204000             Health Care   \n",
       "7     8      General Motors     225000  Motor Vehicles & Parts   \n",
       "8     9                AT&T     268540      Telecommunications   \n",
       "9    10          Ford Motor     201000  Motor Vehicles & Parts   \n",
       "\n",
       "                                   Industry  Revenues  Revchange  Profits  \\\n",
       "0                     General Merchandisers    485873        0.8  13643.0   \n",
       "1  Insurance: Property and Casualty (Stock)    223604        6.1  24074.0   \n",
       "2               Computers, Office Equipment    215639       -7.7  45687.0   \n",
       "3                        Petroleum Refining    205004      -16.7   7840.0   \n",
       "4                  Wholesalers: Health Care    192487        6.2   2258.0   \n",
       "5   Health Care: Insurance and Managed Care    184840       17.7   7017.0   \n",
       "6  Health Care: Pharmacy and Other Services    177526       15.8   5317.0   \n",
       "7                  Motor Vehicles and Parts    166380        9.2   9427.0   \n",
       "8                        Telecommunications    163786       11.6  12976.0   \n",
       "9                  Motor Vehicles and Parts    151800        1.5   4596.0   \n",
       "\n",
       "   Prftchange  \n",
       "0        -7.2  \n",
       "1         0.0  \n",
       "2       -14.4  \n",
       "3       -51.5  \n",
       "4        53.0  \n",
       "5        20.7  \n",
       "6         1.5  \n",
       "7        -2.7  \n",
       "8        -2.8  \n",
       "9       -37.7  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# To print multiple outputs for one cell\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = 'all'\n",
    "\n",
    "df = pd.read_csv('fortune500_2017.csv')\n",
    "f500 = df[['Rank', 'Title', 'Employees', 'Sector', 'Industry',\n",
    "              'Revenues', 'Revchange', 'Profits', 'Prftchange']]\n",
    "f500.shape\n",
    "f500.dtypes\n",
    "f500.head(10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "CkxA8fKKzazG"
   },
   "source": [
    "#### Task 2.1: Get the unique sectors of the companies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "H2OrRue5lqb3",
    "outputId": "1984feef-cc82-453c-8750-60aa141786f9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Retailing', 'Financials', 'Technology', 'Energy', 'Wholesalers',\n",
       "       'Health Care', 'Motor Vehicles & Parts', 'Telecommunications',\n",
       "       'Industrials', 'Food & Drug Stores', 'Aerospace & Defense',\n",
       "       'Household Products', 'Food, Beverages & Tobacco',\n",
       "       'Transportation', 'Media', 'Chemicals', 'Apparel',\n",
       "       'Hotels, Restaurants & Leisure', 'Materials', 'Business Services',\n",
       "       'Engineering & Construction'], dtype=object)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sectors that these companies are in\n",
    "sectors = f500['Sector'].unique()\n",
    "sectors\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rdn11Zllzszy"
   },
   "source": [
    "#### Task 2.2: Get the titles of companies which are in 'Technology' sector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kC-5yEhhlqb4",
    "outputId": "ed07c416-7e91-4f34-8aba-a557ebcffebd"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2                               Apple\n",
       "11                         Amazon.com\n",
       "26                           Alphabet\n",
       "27                          Microsoft\n",
       "31                                IBM\n",
       "40                  Dell Technologies\n",
       "46                              Intel\n",
       "58         Hewlett Packard Enterprise\n",
       "59                      Cisco Systems\n",
       "60                                 HP\n",
       "80                             Oracle\n",
       "97                           Facebook\n",
       "118                          Qualcomm\n",
       "143                           Danaher\n",
       "151                     Jabil Circuit\n",
       "153          Thermo Fisher Scientific\n",
       "161                             Xerox\n",
       "198                               CDW\n",
       "204    Cognizant Technology Solutions\n",
       "205                 Texas Instruments\n",
       "216                   Western Digital\n",
       "225                 Micron Technology\n",
       "264                 Applied Materials\n",
       "267                   Priceline Group\n",
       "309                              eBay\n",
       "313                           Netflix\n",
       "316                           Expedia\n",
       "325                    salesforce.com\n",
       "362                            Harris\n",
       "378                 Computer Sciences\n",
       "380                   Leidos Holdings\n",
       "386                            Nvidia\n",
       "405               Activision Blizzard\n",
       "408                               NCR\n",
       "413                           Sanmina\n",
       "423                          Amphenol\n",
       "432                Motorola Solutions\n",
       "439                      Lam Research\n",
       "442                     Adobe Systems\n",
       "464                          Symantec\n",
       "467                            NetApp\n",
       "480       Booz Allen Hamilton Holding\n",
       "497                             Yahoo\n",
       "Name: Title, dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Names of technology companies\n",
    "tech_companies = f500[f500[\"Sector\"]==\"Technology\"]\n",
    "tech_companies.Title\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "47DqsNvUz1HG"
   },
   "source": [
    "#### Task 2.3: Get the companies (with columns 'Title', 'Profits', 'Prftchange') which has a negative profit but positive profit change"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "eYKgM-YPlqb6",
    "outputId": "efa2975f-f779-488e-ecae-6fc9fe80aa3b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Profits</th>\n",
       "      <th>Prftchange</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Dell Technologies</td>\n",
       "      <td>-1672.0</td>\n",
       "      <td>21.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>ConocoPhillips</td>\n",
       "      <td>-3615.0</td>\n",
       "      <td>10.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126</th>\n",
       "      <td>Sears Holdings</td>\n",
       "      <td>-2221.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>Halliburton</td>\n",
       "      <td>-5763.0</td>\n",
       "      <td>16.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>Freeport-McMoRan</td>\n",
       "      <td>-4154.0</td>\n",
       "      <td>4.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>227</th>\n",
       "      <td>Arconic</td>\n",
       "      <td>-941.0</td>\n",
       "      <td>6.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>228</th>\n",
       "      <td>NRG Energy</td>\n",
       "      <td>-774.0</td>\n",
       "      <td>6.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243</th>\n",
       "      <td>Toys “R” Us</td>\n",
       "      <td>-36.0</td>\n",
       "      <td>5.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>277</th>\n",
       "      <td>Occidental Petroleum</td>\n",
       "      <td>-574.0</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>278</th>\n",
       "      <td>United States Steel</td>\n",
       "      <td>-440.0</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284</th>\n",
       "      <td>Baker Hughes</td>\n",
       "      <td>-2738.0</td>\n",
       "      <td>7.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>Frontier Communications</td>\n",
       "      <td>-373.0</td>\n",
       "      <td>43.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>Chesapeake Energy</td>\n",
       "      <td>-4401.0</td>\n",
       "      <td>7.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>343</th>\n",
       "      <td>Anadarko Petroleum</td>\n",
       "      <td>-3071.0</td>\n",
       "      <td>7.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>382</th>\n",
       "      <td>Tesla</td>\n",
       "      <td>-674.9</td>\n",
       "      <td>10.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>Ascena Retail Group</td>\n",
       "      <td>-11.9</td>\n",
       "      <td>10.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>440</th>\n",
       "      <td>AK Steel Holding</td>\n",
       "      <td>-7.8</td>\n",
       "      <td>39.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>443</th>\n",
       "      <td>Avon Products</td>\n",
       "      <td>-107.6</td>\n",
       "      <td>85.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>453</th>\n",
       "      <td>Genesis Healthcare</td>\n",
       "      <td>-64.0</td>\n",
       "      <td>11.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>487</th>\n",
       "      <td>Apache</td>\n",
       "      <td>-1405.0</td>\n",
       "      <td>82.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>Yahoo</td>\n",
       "      <td>-214.3</td>\n",
       "      <td>5.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>Vistra Energy</td>\n",
       "      <td>-214.3</td>\n",
       "      <td>5.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Title  Profits  Prftchange\n",
       "40         Dell Technologies  -1672.0        21.5\n",
       "114           ConocoPhillips  -3615.0        10.6\n",
       "126           Sears Holdings  -2221.0         5.0\n",
       "172              Halliburton  -5763.0        16.7\n",
       "174         Freeport-McMoRan  -4154.0         4.4\n",
       "227                  Arconic   -941.0         6.7\n",
       "228               NRG Energy   -774.0         6.7\n",
       "243              Toys “R” Us    -36.0         5.8\n",
       "277     Occidental Petroleum   -574.0         4.2\n",
       "278      United States Steel   -440.0         4.2\n",
       "284             Baker Hughes  -2738.0         7.2\n",
       "312  Frontier Communications   -373.0        43.7\n",
       "342        Chesapeake Energy  -4401.0         7.1\n",
       "343       Anadarko Petroleum  -3071.0         7.1\n",
       "382                    Tesla   -674.9        10.7\n",
       "383      Ascena Retail Group    -11.9        10.7\n",
       "440         AK Steel Holding     -7.8        39.4\n",
       "443            Avon Products   -107.6        85.7\n",
       "453       Genesis Healthcare    -64.0        11.7\n",
       "487                   Apache  -1405.0        82.5\n",
       "497                    Yahoo   -214.3         5.2\n",
       "498            Vistra Energy   -214.3         5.2"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Companies with negative profits but positive profit change\n",
    "improving = f500.loc[(f500.Profits < 0) & (f500.Prftchange > 0),[\"Title\",\"Profits\",\"Prftchange\"]]\n",
    "improving"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Task 2.4: Get all companies (with all columns) which have a negative profit, sorted in ascending order by ‘Profits’"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 422
    },
    "id": "_04MaOnPlqb5",
    "outputId": "7ff17fa3-d70a-4e58-b5c9-69c139d4b613"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rank</th>\n",
       "      <th>Title</th>\n",
       "      <th>Employees</th>\n",
       "      <th>Sector</th>\n",
       "      <th>Industry</th>\n",
       "      <th>Revenues</th>\n",
       "      <th>Revchange</th>\n",
       "      <th>Profits</th>\n",
       "      <th>Prftchange</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>196</td>\n",
       "      <td>FirstEnergy</td>\n",
       "      <td>15707</td>\n",
       "      <td>Energy</td>\n",
       "      <td>Utilities: Gas and Electric</td>\n",
       "      <td>14156</td>\n",
       "      <td>-3.1</td>\n",
       "      <td>-6177.0</td>\n",
       "      <td>-1168.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>173</td>\n",
       "      <td>Halliburton</td>\n",
       "      <td>50000</td>\n",
       "      <td>Energy</td>\n",
       "      <td>Oil and Gas Equipment, Services</td>\n",
       "      <td>15887</td>\n",
       "      <td>-32.8</td>\n",
       "      <td>-5763.0</td>\n",
       "      <td>16.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>343</td>\n",
       "      <td>Chesapeake Energy</td>\n",
       "      <td>3300</td>\n",
       "      <td>Energy</td>\n",
       "      <td>Mining, Crude-Oil Production</td>\n",
       "      <td>7872</td>\n",
       "      <td>-38.3</td>\n",
       "      <td>-4401.0</td>\n",
       "      <td>7.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>175</td>\n",
       "      <td>Freeport-McMoRan</td>\n",
       "      <td>30000</td>\n",
       "      <td>Energy</td>\n",
       "      <td>Mining, Crude-Oil Production</td>\n",
       "      <td>15789</td>\n",
       "      <td>-0.6</td>\n",
       "      <td>-4154.0</td>\n",
       "      <td>4.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>115</td>\n",
       "      <td>ConocoPhillips</td>\n",
       "      <td>13300</td>\n",
       "      <td>Energy</td>\n",
       "      <td>Mining, Crude-Oil Production</td>\n",
       "      <td>24360</td>\n",
       "      <td>-21.3</td>\n",
       "      <td>-3615.0</td>\n",
       "      <td>10.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243</th>\n",
       "      <td>244</td>\n",
       "      <td>Toys “R” Us</td>\n",
       "      <td>64000</td>\n",
       "      <td>Retailing</td>\n",
       "      <td>Specialty Retailers: Other</td>\n",
       "      <td>11540</td>\n",
       "      <td>-2.2</td>\n",
       "      <td>-36.0</td>\n",
       "      <td>5.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>383</th>\n",
       "      <td>384</td>\n",
       "      <td>Ascena Retail Group</td>\n",
       "      <td>41000</td>\n",
       "      <td>Retailing</td>\n",
       "      <td>Specialty Retailers: Apparel</td>\n",
       "      <td>6995</td>\n",
       "      <td>45.6</td>\n",
       "      <td>-11.9</td>\n",
       "      <td>10.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>440</th>\n",
       "      <td>441</td>\n",
       "      <td>AK Steel Holding</td>\n",
       "      <td>8500</td>\n",
       "      <td>Materials</td>\n",
       "      <td>Metals</td>\n",
       "      <td>5883</td>\n",
       "      <td>-12.1</td>\n",
       "      <td>-7.8</td>\n",
       "      <td>39.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>466</th>\n",
       "      <td>467</td>\n",
       "      <td>Olin</td>\n",
       "      <td>6400</td>\n",
       "      <td>Chemicals</td>\n",
       "      <td>Chemicals</td>\n",
       "      <td>5551</td>\n",
       "      <td>94.5</td>\n",
       "      <td>-3.9</td>\n",
       "      <td>-16.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>469</th>\n",
       "      <td>470</td>\n",
       "      <td>TravelCenters of America</td>\n",
       "      <td>20259</td>\n",
       "      <td>Retailing</td>\n",
       "      <td>Specialty Retailers: Other</td>\n",
       "      <td>5511</td>\n",
       "      <td>-5.8</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>-107.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>63 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Rank                     Title  Employees     Sector  \\\n",
       "195   196               FirstEnergy      15707     Energy   \n",
       "172   173               Halliburton      50000     Energy   \n",
       "342   343         Chesapeake Energy       3300     Energy   \n",
       "174   175          Freeport-McMoRan      30000     Energy   \n",
       "114   115            ConocoPhillips      13300     Energy   \n",
       "..    ...                       ...        ...        ...   \n",
       "243   244               Toys “R” Us      64000  Retailing   \n",
       "383   384       Ascena Retail Group      41000  Retailing   \n",
       "440   441          AK Steel Holding       8500  Materials   \n",
       "466   467                      Olin       6400  Chemicals   \n",
       "469   470  TravelCenters of America      20259  Retailing   \n",
       "\n",
       "                            Industry  Revenues  Revchange  Profits  Prftchange  \n",
       "195      Utilities: Gas and Electric     14156       -3.1  -6177.0     -1168.7  \n",
       "172  Oil and Gas Equipment, Services     15887      -32.8  -5763.0        16.7  \n",
       "342     Mining, Crude-Oil Production      7872      -38.3  -4401.0         7.1  \n",
       "174     Mining, Crude-Oil Production     15789       -0.6  -4154.0         4.4  \n",
       "114     Mining, Crude-Oil Production     24360      -21.3  -3615.0        10.6  \n",
       "..                               ...       ...        ...      ...         ...  \n",
       "243       Specialty Retailers: Other     11540       -2.2    -36.0         5.8  \n",
       "383     Specialty Retailers: Apparel      6995       45.6    -11.9        10.7  \n",
       "440                           Metals      5883      -12.1     -7.8        39.4  \n",
       "466                        Chemicals      5551       94.5     -3.9       -16.2  \n",
       "469       Specialty Retailers: Other      5511       -5.8     -2.0      -107.3  \n",
       "\n",
       "[63 rows x 9 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Companies with negative profit\n",
    "negative_profits = f500[f500.Profits<0]\n",
    "negative_profits.sort_values(\"Profits\", ascending = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Task 2.5: Get the top 5 companies (with columns ‘Title ‘and ‘Employees’) which hire the most number of employees, sorted in descending order by ‘Employees’"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 205
    },
    "id": "yL7nDE4rlqb7",
    "outputId": "76bd391b-0506-4b39-b7b6-bc7d246342eb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Employees</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Walmart</td>\n",
       "      <td>2300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Kroger</td>\n",
       "      <td>443000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>Yum China Holdings</td>\n",
       "      <td>420000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>IBM</td>\n",
       "      <td>414400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Home Depot</td>\n",
       "      <td>406000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Title  Employees\n",
       "0               Walmart    2300000\n",
       "17               Kroger     443000\n",
       "398  Yum China Holdings     420000\n",
       "31                  IBM     414400\n",
       "22           Home Depot     406000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The top 5 companies hiring the most number of employees\n",
    "big_hirers = f500.sort_values(\"Employees\", ascending = False)\n",
    "big_hirers.head(5)[['Title', 'Employees']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Task 2.6: Get the company (with all columns) which has the maximum profit margin (i.e., ‘Profits’/’Revenues’)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"None of [Float64Index([  0.02807935406989069,   0.10766354805817427,\\n                  0.211867983064288,   0.03824315623109793,\\n               0.011730662330443094,  0.037962562215970566,\\n                0.02995054245575296,  0.056659454261329484,\\n                0.07922533061433822,  0.030276679841897233,\\n              ...\\n                 0.1288855193328279,   0.13842935919376306,\\n                 0.0654095238095238, 0.0028647822765469825,\\n               0.029384615384615387,   0.07277275351164134,\\n                0.07390715667311412, -0.041458696072741344,\\n              -0.041498838109992255,  0.011117589893100098],\\n             dtype='float64', length=500)] are in the [index]\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-397cccc77147>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmax_profiter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf500\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf500\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mProfits\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mf500\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRevenues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0midxmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mmax_profiter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1766\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1767\u001b[0m             \u001b[0mmaybe_callable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1768\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaybe_callable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1769\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1770\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_is_scalar_access\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1952\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Cannot index with multidimensional key\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1953\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1954\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1955\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1956\u001b[0m             \u001b[0;31m# nested tuple slicing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_iterable\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1593\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1594\u001b[0m             \u001b[0;31m# A collection of keys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1595\u001b[0;31m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1596\u001b[0m             return self.obj._reindex_with_indexers(\n\u001b[1;32m   1597\u001b[0m                 \u001b[0;34m{\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_dups\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1550\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1551\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1552\u001b[0;31m         self._validate_read_indexer(\n\u001b[0m\u001b[1;32m   1553\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_number\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mraise_missing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1554\u001b[0m         )\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1638\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmissing\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1639\u001b[0m                 \u001b[0maxis_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1640\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1641\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1642\u001b[0m             \u001b[0;31m# We (temporarily) allow for some missing keys with .loc, except in\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: \"None of [Float64Index([  0.02807935406989069,   0.10766354805817427,\\n                  0.211867983064288,   0.03824315623109793,\\n               0.011730662330443094,  0.037962562215970566,\\n                0.02995054245575296,  0.056659454261329484,\\n                0.07922533061433822,  0.030276679841897233,\\n              ...\\n                 0.1288855193328279,   0.13842935919376306,\\n                 0.0654095238095238, 0.0028647822765469825,\\n               0.029384615384615387,   0.07277275351164134,\\n                0.07390715667311412, -0.041458696072741344,\\n              -0.041498838109992255,  0.011117589893100098],\\n             dtype='float64', length=500)] are in the [index]\""
     ]
    }
   ],
   "source": [
    "max_profiter = f500[(f500.Profits/f500.Revenues)].idxmax()\n",
    "max_profiter\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 272
    },
    "id": "EKHHEuSElqb8",
    "outputId": "97cb9daf-6ed8-4720-db26-b4b7d2b96c06"
   },
   "outputs": [],
   "source": [
    "# The company with the maximum profit margin\n",
    "f500['Profit Margin'] = f500['Profits']/f500['Revenues']\n",
    "max_profiter = f500.sort_values(\"Profit Margin\", ascending = False)\n",
    "max_profiter.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "isom5160_lec01_exercise_done.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
